Outline

*** Setting up the data to be used in SVM training and testing

1) The data taken from <website> was a .data file so the first step was to convert the .data file to .csv file.
	`Converting .data to .csv`
	> Rename .data file to .txt
	> Open the .txt file as data in excel using comma as a separator
	> Save the file as .csv

*** Writing the python code
1) Get the necessary imports, namely pandas and numpy.
	Pandas will be used to read the csv file and numpy will be used to convert the data into a data frame.

2) Get the data by using pandas read_csv() function. In the code, we save the data in parkinsons_df.

3) We identify the relevant columns in the data and assign the independent and dependent variables.
	We let X be the independent variable and y be the dependent variable.
	The relevant columns will count as the features and will be our independent values. Namely, all values under all the columns except columns 'name' and 'status'. Column 'name' is not included as it is only an indicator for the participants and not a real measure.
	The dependent values will be the values under column 'status', where 1 is PD positive and 0 is healthy.

4) We divide our data into training and test sets.
	To do this, we use train_test_split function from sklearn.model_selection module.
	We put 80% of the data into the training sets and 20% into the test sets.
	4 new arrays will be generated: X_train, X_test, y_train, and y_test.

*** SVM
5) We make our SVM model using sklearn.
	First, define the penalty for misclassification. In which case, we use 1.
	We choose linear kernel and set the gamma value to auto.

# I think we can add more stuff around here. For example, trying out different kernels and C values then comparing them so we'd have some sort of an argument on why we opted to use these parameters.
# ^ Not necessary I guess, but might help make the method look better owo and fyi I did use different kernels and c-values and found that linear with c=1 generated highest accuracy uwu. Just wasn't sure if we should include it or not.

6) Display the results using classification_report function of sklearn.metrics.
	Here we're shown a table with values in precision, recall, f1-score, and support columns.

# Theeeeen, result analysis on these values... aaaa